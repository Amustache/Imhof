package ch.epfl.imhof.dem;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.ShortBuffer;
import java.nio.channels.FileChannel.MapMode;

import ch.epfl.imhof.PointGeo;
import ch.epfl.imhof.Vector3;
import static java.lang.Math.toDegrees;
import static java.lang.Math.sqrt;

/**
 * 
 * @author Hugo Hueber (246095)
 * @author Maxime Pisa (247650)
 * 
 *         MNT stocke dans un fichier au format HGT
 *
 */
public class HGTDigitalElevationModel implements DigitalElevationModel {
    private final double swLongitude, swLatitude; // Deg
    private final double reso;
    private final int size;
    private ShortBuffer buffer;

    /**
     * 
     * @param file
     *            Le fichier a passer en parametre
     * @throws IllegalArgumentException
     *             Si le format du fichier est invalide
     * @throws IOException
     *             S'il y a une erreur I/O
     * @throws FileNotFoundException
     *             Si le fichier n'est pas trouve (duh)
     */
    public HGTDigitalElevationModel(File file) throws IllegalArgumentException,
            FileNotFoundException, IOException {
        String filename = file.getName();
        long length = file.length();

        if (!(filename.length() == 11)
                || !filename.substring(7, 11).equals(".hgt")
                || !(true)) {
            throw new IllegalArgumentException(
                    "Le fichier n'est pas au format HGT");
        }

        if (filename.charAt(0) != 'N' && filename.charAt(0) != 'S') {
            throw new IllegalArgumentException(
                    "Latitude du nom de fichier incorrecte");
        } else {
            try {
                swLatitude = filename.charAt(0) == 'N' ? Integer
                        .parseInt(filename.substring(1, 3)) : (-1)
                        * Integer.parseInt(filename.substring(1, 3));
            } catch (Exception e) {
                throw new IllegalArgumentException(
                        "Latitude du nom de fichier incorrecte");
            }
        }

        if (filename.charAt(3) != 'E' && filename.charAt(3) != 'W') {
            throw new IllegalArgumentException(
                    "Longitude du nom de fichier incorrecte");
        } else {
            try {
                swLongitude = filename.charAt(3) == 'E' ? Integer
                        .parseInt(filename.substring(4, 7)) : (-1)
                        * Integer.parseInt(filename.substring(4, 7));
            } catch (Exception e) {
                throw new IllegalArgumentException(
                        "Longitude du nom de fichier incorrecte");
            }
        }

        this.size = (int) sqrt(0.5 * length) - 1;
        this.reso = 1.0 / (this.size);

        try (FileInputStream stream = new FileInputStream(file)) {
            this.buffer = stream.getChannel().map(MapMode.READ_ONLY, 0, length)
                    .asShortBuffer();
        }
    }

    /**
     * Supprime le buffer
     */
    @Override
    public void close() throws Exception {
        // TODO Auto-generated method stub
        this.buffer = null;
    }

    /**
     * 
     * @param point
     *            Point en coordonnees WGS 84
     * @return Vecteur normal a la Terre en ce point
     */
    @Override
    public Vector3 normalAt(PointGeo point) throws IllegalArgumentException {
        double longitude = toDegrees(point.longitude());
        double latitude = toDegrees(point.latitude());

        if (longitude < this.swLongitude || longitude > this.swLongitude + 1
                || latitude < this.swLatitude
                || latitude > this.swLatitude + 1) {
            System.out.println(longitude +","+this.swLongitude);
            System.out.println(latitude+","+this.swLatitude);
            throw new IllegalArgumentException(
                    "Le point ne fait pas parti du fichier");
        }

        double s = Earth.RADIUS * this.reso;

        int lat = (int) ((latitude - this.swLatitude) / this.reso);
        int lon = (int) ((longitude - this.swLongitude) / this.reso);
        
        double z11 = this.buffer.get((lon + 1) + (this.size + 1) * (lat - 1));
        double z12 = this.buffer.get((lon) + (this.size + 1) * (lat));
        double z21 = this.buffer.get((lon) + (this.size + 1) * (lat - 1));
        double z22 = this.buffer.get((lon + 1) + (this.size + 1) * (lat));

        double za = z21 - z11, zb = z12 - z11, zc = z12 - z22, zd = z21 - z22;
        double x = 0.5 * (zc - za) * s;
        double y = 0.5 * (zd - zb) * s;
        double z = s * s;

        return new Vector3(x, y, z);
    }
}
